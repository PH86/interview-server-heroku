
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 */

export type User = {
  id: string
  email: string
  password: string
}

/**
 * Model UserSettings
 */

export type UserSettings = {
  id: string
  userId: string
  firstName: string
  sirname: string
  company: string | null
  subscription: string
}

/**
 * Model Vacancy
 */

export type Vacancy = {
  id: string
  createdAt: Date
  title: string
  company: string
  location: string
  salary: number
  endDate: string
  jobDescription: string
  companyDescription: string
  salaryMin: number | null
  salaryMax: number | null
  requirementEssential: string[]
  requirementDesired: string[]
  responsibilities: string[]
  authorId: string
}

/**
 * Model Applicants
 */

export type Applicants = {
  id: string
  name: string
  currentJob: string
  location: string
  email: string
  phoneNumber: string
  cvLink: string
  vacancyId: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.$executeRaw``, values will be escaped automatically
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.$executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.$queryRaw``, values will be escaped automatically
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.$queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.userSettings`: Exposes CRUD operations for the **UserSettings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSettings
    * const userSettings = await prisma.userSettings.findMany()
    * ```
    */
  get userSettings(): Prisma.UserSettingsDelegate<GlobalReject>;

  /**
   * `prisma.vacancy`: Exposes CRUD operations for the **Vacancy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vacancies
    * const vacancies = await prisma.vacancy.findMany()
    * ```
    */
  get vacancy(): Prisma.VacancyDelegate<GlobalReject>;

  /**
   * `prisma.applicants`: Exposes CRUD operations for the **Applicants** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Applicants
    * const applicants = await prisma.applicants.findMany()
    * ```
    */
  get applicants(): Prisma.ApplicantsDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.27.0
   * Query Engine version: cdba6ec525e0213cce26f8e4bb23cf556d1479bb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    UserSettings: 'UserSettings',
    Vacancy: 'Vacancy',
    Applicants: 'Applicants'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }


    
    
  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Promise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], UserGroupByOutputType[P]> 
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      > 
    >


  export type UserSelect = {
    id?: boolean
    email?: boolean
    password?: boolean
    settings?: boolean | UserSettingsFindManyArgs
  }

  export type UserInclude = {
    settings?: boolean | UserSettingsFindManyArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'settings'
        ? Array < UserSettingsGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
          P extends 'settings'
        ? Array < UserSettingsGetPayload<S['select'][P]>>  : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    settings<T extends UserSettingsFindManyArgs = {}>(args?: Subset<T, UserSettingsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<UserSettings>>, PrismaPromise<Array<UserSettingsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model UserSettings
   */


  export type AggregateUserSettings = {
    _count: UserSettingsCountAggregateOutputType | null
    count: UserSettingsCountAggregateOutputType | null
    _min: UserSettingsMinAggregateOutputType | null
    min: UserSettingsMinAggregateOutputType | null
    _max: UserSettingsMaxAggregateOutputType | null
    max: UserSettingsMaxAggregateOutputType | null
  }

  export type UserSettingsMinAggregateOutputType = {
    id: string | null
    userId: string | null
    firstName: string | null
    sirname: string | null
    company: string | null
    subscription: string | null
  }

  export type UserSettingsMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    firstName: string | null
    sirname: string | null
    company: string | null
    subscription: string | null
  }

  export type UserSettingsCountAggregateOutputType = {
    id: number
    userId: number
    firstName: number
    sirname: number
    company: number
    subscription: number
    _all: number
  }


  export type UserSettingsMinAggregateInputType = {
    id?: true
    userId?: true
    firstName?: true
    sirname?: true
    company?: true
    subscription?: true
  }

  export type UserSettingsMaxAggregateInputType = {
    id?: true
    userId?: true
    firstName?: true
    sirname?: true
    company?: true
    subscription?: true
  }

  export type UserSettingsCountAggregateInputType = {
    id?: true
    userId?: true
    firstName?: true
    sirname?: true
    company?: true
    subscription?: true
    _all?: true
  }

  export type UserSettingsAggregateArgs = {
    /**
     * Filter which UserSettings to aggregate.
     * 
    **/
    where?: UserSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     * 
    **/
    orderBy?: Enumerable<UserSettingsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSettings
    **/
    _count?: true | UserSettingsCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | UserSettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSettingsMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: UserSettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSettingsMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: UserSettingsMaxAggregateInputType
  }

  export type GetUserSettingsAggregateType<T extends UserSettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSettings[P]>
      : GetScalarType<T[P], AggregateUserSettings[P]>
  }


    
    
  export type UserSettingsGroupByArgs = {
    where?: UserSettingsWhereInput
    orderBy?: Enumerable<UserSettingsOrderByInput>
    by: Array<UserSettingsScalarFieldEnum>
    having?: UserSettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSettingsCountAggregateInputType | true
    _min?: UserSettingsMinAggregateInputType
    _max?: UserSettingsMaxAggregateInputType
  }


  export type UserSettingsGroupByOutputType = {
    id: string
    userId: string
    firstName: string
    sirname: string
    company: string | null
    subscription: string
    _count: UserSettingsCountAggregateOutputType | null
    _min: UserSettingsMinAggregateOutputType | null
    _max: UserSettingsMaxAggregateOutputType | null
  }

  type GetUserSettingsGroupByPayload<T extends UserSettingsGroupByArgs> = Promise<
    Array<
      PickArray<UserSettingsGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof UserSettingsGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], UserSettingsGroupByOutputType[P]> 
            : GetScalarType<T[P], UserSettingsGroupByOutputType[P]>
        }
      > 
    >


  export type UserSettingsSelect = {
    id?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    firstName?: boolean
    sirname?: boolean
    company?: boolean
    subscription?: boolean
    vacancies?: boolean | VacancyFindManyArgs
  }

  export type UserSettingsInclude = {
    user?: boolean | UserArgs
    vacancies?: boolean | VacancyFindManyArgs
  }

  export type UserSettingsGetPayload<
    S extends boolean | null | undefined | UserSettingsArgs,
    U = keyof S
      > = S extends true
        ? UserSettings
    : S extends undefined
    ? never
    : S extends UserSettingsArgs | UserSettingsFindManyArgs
    ?'include' extends U
    ? UserSettings  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? UserGetPayload<S['include'][P]> :
        P extends 'vacancies'
        ? Array < VacancyGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof UserSettings ?UserSettings [P]
  : 
          P extends 'user'
        ? UserGetPayload<S['select'][P]> :
        P extends 'vacancies'
        ? Array < VacancyGetPayload<S['select'][P]>>  : never
  } 
    : UserSettings
  : UserSettings


  type UserSettingsCountArgs = Merge<
    Omit<UserSettingsFindManyArgs, 'select' | 'include'> & {
      select?: UserSettingsCountAggregateInputType | true
    }
  >

  export interface UserSettingsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one UserSettings that matches the filter.
     * @param {UserSettingsFindUniqueArgs} args - Arguments to find a UserSettings
     * @example
     * // Get one UserSettings
     * const userSettings = await prisma.userSettings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserSettingsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserSettingsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserSettings'> extends True ? CheckSelect<T, Prisma__UserSettingsClient<UserSettings>, Prisma__UserSettingsClient<UserSettingsGetPayload<T>>> : CheckSelect<T, Prisma__UserSettingsClient<UserSettings | null >, Prisma__UserSettingsClient<UserSettingsGetPayload<T> | null >>

    /**
     * Find the first UserSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsFindFirstArgs} args - Arguments to find a UserSettings
     * @example
     * // Get one UserSettings
     * const userSettings = await prisma.userSettings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserSettingsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserSettingsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserSettings'> extends True ? CheckSelect<T, Prisma__UserSettingsClient<UserSettings>, Prisma__UserSettingsClient<UserSettingsGetPayload<T>>> : CheckSelect<T, Prisma__UserSettingsClient<UserSettings | null >, Prisma__UserSettingsClient<UserSettingsGetPayload<T> | null >>

    /**
     * Find zero or more UserSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSettings
     * const userSettings = await prisma.userSettings.findMany()
     * 
     * // Get first 10 UserSettings
     * const userSettings = await prisma.userSettings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userSettingsWithIdOnly = await prisma.userSettings.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserSettingsFindManyArgs>(
      args?: SelectSubset<T, UserSettingsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<UserSettings>>, PrismaPromise<Array<UserSettingsGetPayload<T>>>>

    /**
     * Create a UserSettings.
     * @param {UserSettingsCreateArgs} args - Arguments to create a UserSettings.
     * @example
     * // Create one UserSettings
     * const UserSettings = await prisma.userSettings.create({
     *   data: {
     *     // ... data to create a UserSettings
     *   }
     * })
     * 
    **/
    create<T extends UserSettingsCreateArgs>(
      args: SelectSubset<T, UserSettingsCreateArgs>
    ): CheckSelect<T, Prisma__UserSettingsClient<UserSettings>, Prisma__UserSettingsClient<UserSettingsGetPayload<T>>>

    /**
     * Create many UserSettings.
     *     @param {UserSettingsCreateManyArgs} args - Arguments to create many UserSettings.
     *     @example
     *     // Create many UserSettings
     *     const userSettings = await prisma.userSettings.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserSettingsCreateManyArgs>(
      args?: SelectSubset<T, UserSettingsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a UserSettings.
     * @param {UserSettingsDeleteArgs} args - Arguments to delete one UserSettings.
     * @example
     * // Delete one UserSettings
     * const UserSettings = await prisma.userSettings.delete({
     *   where: {
     *     // ... filter to delete one UserSettings
     *   }
     * })
     * 
    **/
    delete<T extends UserSettingsDeleteArgs>(
      args: SelectSubset<T, UserSettingsDeleteArgs>
    ): CheckSelect<T, Prisma__UserSettingsClient<UserSettings>, Prisma__UserSettingsClient<UserSettingsGetPayload<T>>>

    /**
     * Update one UserSettings.
     * @param {UserSettingsUpdateArgs} args - Arguments to update one UserSettings.
     * @example
     * // Update one UserSettings
     * const userSettings = await prisma.userSettings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserSettingsUpdateArgs>(
      args: SelectSubset<T, UserSettingsUpdateArgs>
    ): CheckSelect<T, Prisma__UserSettingsClient<UserSettings>, Prisma__UserSettingsClient<UserSettingsGetPayload<T>>>

    /**
     * Delete zero or more UserSettings.
     * @param {UserSettingsDeleteManyArgs} args - Arguments to filter UserSettings to delete.
     * @example
     * // Delete a few UserSettings
     * const { count } = await prisma.userSettings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserSettingsDeleteManyArgs>(
      args?: SelectSubset<T, UserSettingsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSettings
     * const userSettings = await prisma.userSettings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserSettingsUpdateManyArgs>(
      args: SelectSubset<T, UserSettingsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserSettings.
     * @param {UserSettingsUpsertArgs} args - Arguments to update or create a UserSettings.
     * @example
     * // Update or create a UserSettings
     * const userSettings = await prisma.userSettings.upsert({
     *   create: {
     *     // ... data to create a UserSettings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSettings we want to update
     *   }
     * })
    **/
    upsert<T extends UserSettingsUpsertArgs>(
      args: SelectSubset<T, UserSettingsUpsertArgs>
    ): CheckSelect<T, Prisma__UserSettingsClient<UserSettings>, Prisma__UserSettingsClient<UserSettingsGetPayload<T>>>

    /**
     * Count the number of UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsCountArgs} args - Arguments to filter UserSettings to count.
     * @example
     * // Count the number of UserSettings
     * const count = await prisma.userSettings.count({
     *   where: {
     *     // ... the filter for the UserSettings we want to count
     *   }
     * })
    **/
    count<T extends UserSettingsCountArgs>(
      args?: Subset<T, UserSettingsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSettingsAggregateArgs>(args: Subset<T, UserSettingsAggregateArgs>): PrismaPromise<GetUserSettingsAggregateType<T>>

    /**
     * Group by UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSettingsGroupByArgs['orderBy'] }
        : { orderBy?: UserSettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSettingsGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSettings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserSettingsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    vacancies<T extends VacancyFindManyArgs = {}>(args?: Subset<T, VacancyFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Vacancy>>, PrismaPromise<Array<VacancyGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * UserSettings findUnique
   */
  export type UserSettingsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the UserSettings
     * 
    **/
    select?: UserSettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserSettingsInclude | null
    /**
     * Throw an Error if a UserSettings can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which UserSettings to fetch.
     * 
    **/
    where: UserSettingsWhereUniqueInput
  }


  /**
   * UserSettings findFirst
   */
  export type UserSettingsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the UserSettings
     * 
    **/
    select?: UserSettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserSettingsInclude | null
    /**
     * Throw an Error if a UserSettings can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which UserSettings to fetch.
     * 
    **/
    where?: UserSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     * 
    **/
    orderBy?: Enumerable<UserSettingsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSettings.
     * 
    **/
    cursor?: UserSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSettings.
     * 
    **/
    distinct?: Enumerable<UserSettingsScalarFieldEnum>
  }


  /**
   * UserSettings findMany
   */
  export type UserSettingsFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserSettings
     * 
    **/
    select?: UserSettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserSettingsInclude | null
    /**
     * Filter, which UserSettings to fetch.
     * 
    **/
    where?: UserSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     * 
    **/
    orderBy?: Enumerable<UserSettingsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSettings.
     * 
    **/
    cursor?: UserSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserSettingsScalarFieldEnum>
  }


  /**
   * UserSettings create
   */
  export type UserSettingsCreateArgs = {
    /**
     * Select specific fields to fetch from the UserSettings
     * 
    **/
    select?: UserSettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserSettingsInclude | null
    /**
     * The data needed to create a UserSettings.
     * 
    **/
    data: XOR<UserSettingsCreateInput, UserSettingsUncheckedCreateInput>
  }


  /**
   * UserSettings createMany
   */
  export type UserSettingsCreateManyArgs = {
    data: Enumerable<UserSettingsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserSettings update
   */
  export type UserSettingsUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserSettings
     * 
    **/
    select?: UserSettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserSettingsInclude | null
    /**
     * The data needed to update a UserSettings.
     * 
    **/
    data: XOR<UserSettingsUpdateInput, UserSettingsUncheckedUpdateInput>
    /**
     * Choose, which UserSettings to update.
     * 
    **/
    where: UserSettingsWhereUniqueInput
  }


  /**
   * UserSettings updateMany
   */
  export type UserSettingsUpdateManyArgs = {
    data: XOR<UserSettingsUpdateManyMutationInput, UserSettingsUncheckedUpdateManyInput>
    where?: UserSettingsWhereInput
  }


  /**
   * UserSettings upsert
   */
  export type UserSettingsUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserSettings
     * 
    **/
    select?: UserSettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserSettingsInclude | null
    /**
     * The filter to search for the UserSettings to update in case it exists.
     * 
    **/
    where: UserSettingsWhereUniqueInput
    /**
     * In case the UserSettings found by the `where` argument doesn't exist, create a new UserSettings with this data.
     * 
    **/
    create: XOR<UserSettingsCreateInput, UserSettingsUncheckedCreateInput>
    /**
     * In case the UserSettings was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserSettingsUpdateInput, UserSettingsUncheckedUpdateInput>
  }


  /**
   * UserSettings delete
   */
  export type UserSettingsDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserSettings
     * 
    **/
    select?: UserSettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserSettingsInclude | null
    /**
     * Filter which UserSettings to delete.
     * 
    **/
    where: UserSettingsWhereUniqueInput
  }


  /**
   * UserSettings deleteMany
   */
  export type UserSettingsDeleteManyArgs = {
    where?: UserSettingsWhereInput
  }


  /**
   * UserSettings without action
   */
  export type UserSettingsArgs = {
    /**
     * Select specific fields to fetch from the UserSettings
     * 
    **/
    select?: UserSettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserSettingsInclude | null
  }



  /**
   * Model Vacancy
   */


  export type AggregateVacancy = {
    _count: VacancyCountAggregateOutputType | null
    count: VacancyCountAggregateOutputType | null
    _avg: VacancyAvgAggregateOutputType | null
    avg: VacancyAvgAggregateOutputType | null
    _sum: VacancySumAggregateOutputType | null
    sum: VacancySumAggregateOutputType | null
    _min: VacancyMinAggregateOutputType | null
    min: VacancyMinAggregateOutputType | null
    _max: VacancyMaxAggregateOutputType | null
    max: VacancyMaxAggregateOutputType | null
  }

  export type VacancyAvgAggregateOutputType = {
    salary: number | null
    salaryMin: number | null
    salaryMax: number | null
  }

  export type VacancySumAggregateOutputType = {
    salary: number | null
    salaryMin: number | null
    salaryMax: number | null
  }

  export type VacancyMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    title: string | null
    company: string | null
    location: string | null
    salary: number | null
    endDate: string | null
    jobDescription: string | null
    companyDescription: string | null
    salaryMin: number | null
    salaryMax: number | null
    authorId: string | null
  }

  export type VacancyMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    title: string | null
    company: string | null
    location: string | null
    salary: number | null
    endDate: string | null
    jobDescription: string | null
    companyDescription: string | null
    salaryMin: number | null
    salaryMax: number | null
    authorId: string | null
  }

  export type VacancyCountAggregateOutputType = {
    id: number
    createdAt: number
    title: number
    company: number
    location: number
    salary: number
    endDate: number
    jobDescription: number
    companyDescription: number
    salaryMin: number
    salaryMax: number
    requirementEssential: number
    requirementDesired: number
    responsibilities: number
    authorId: number
    _all: number
  }


  export type VacancyAvgAggregateInputType = {
    salary?: true
    salaryMin?: true
    salaryMax?: true
  }

  export type VacancySumAggregateInputType = {
    salary?: true
    salaryMin?: true
    salaryMax?: true
  }

  export type VacancyMinAggregateInputType = {
    id?: true
    createdAt?: true
    title?: true
    company?: true
    location?: true
    salary?: true
    endDate?: true
    jobDescription?: true
    companyDescription?: true
    salaryMin?: true
    salaryMax?: true
    authorId?: true
  }

  export type VacancyMaxAggregateInputType = {
    id?: true
    createdAt?: true
    title?: true
    company?: true
    location?: true
    salary?: true
    endDate?: true
    jobDescription?: true
    companyDescription?: true
    salaryMin?: true
    salaryMax?: true
    authorId?: true
  }

  export type VacancyCountAggregateInputType = {
    id?: true
    createdAt?: true
    title?: true
    company?: true
    location?: true
    salary?: true
    endDate?: true
    jobDescription?: true
    companyDescription?: true
    salaryMin?: true
    salaryMax?: true
    requirementEssential?: true
    requirementDesired?: true
    responsibilities?: true
    authorId?: true
    _all?: true
  }

  export type VacancyAggregateArgs = {
    /**
     * Filter which Vacancy to aggregate.
     * 
    **/
    where?: VacancyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vacancies to fetch.
     * 
    **/
    orderBy?: Enumerable<VacancyOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: VacancyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vacancies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vacancies.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vacancies
    **/
    _count?: true | VacancyCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | VacancyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VacancyAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: VacancyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VacancySumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: VacancySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VacancyMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: VacancyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VacancyMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: VacancyMaxAggregateInputType
  }

  export type GetVacancyAggregateType<T extends VacancyAggregateArgs> = {
        [P in keyof T & keyof AggregateVacancy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVacancy[P]>
      : GetScalarType<T[P], AggregateVacancy[P]>
  }


    
    
  export type VacancyGroupByArgs = {
    where?: VacancyWhereInput
    orderBy?: Enumerable<VacancyOrderByInput>
    by: Array<VacancyScalarFieldEnum>
    having?: VacancyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VacancyCountAggregateInputType | true
    _avg?: VacancyAvgAggregateInputType
    _sum?: VacancySumAggregateInputType
    _min?: VacancyMinAggregateInputType
    _max?: VacancyMaxAggregateInputType
  }


  export type VacancyGroupByOutputType = {
    id: string
    createdAt: Date
    title: string
    company: string
    location: string
    salary: number
    endDate: string
    jobDescription: string
    companyDescription: string
    salaryMin: number | null
    salaryMax: number | null
    requirementEssential: string[]
    requirementDesired: string[]
    responsibilities: string[]
    authorId: string
    _count: VacancyCountAggregateOutputType | null
    _avg: VacancyAvgAggregateOutputType | null
    _sum: VacancySumAggregateOutputType | null
    _min: VacancyMinAggregateOutputType | null
    _max: VacancyMaxAggregateOutputType | null
  }

  type GetVacancyGroupByPayload<T extends VacancyGroupByArgs> = Promise<
    Array<
      PickArray<VacancyGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof VacancyGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], VacancyGroupByOutputType[P]> 
            : GetScalarType<T[P], VacancyGroupByOutputType[P]>
        }
      > 
    >


  export type VacancySelect = {
    id?: boolean
    createdAt?: boolean
    title?: boolean
    company?: boolean
    location?: boolean
    salary?: boolean
    applicants?: boolean | ApplicantsFindManyArgs
    endDate?: boolean
    jobDescription?: boolean
    companyDescription?: boolean
    salaryMin?: boolean
    salaryMax?: boolean
    requirementEssential?: boolean
    requirementDesired?: boolean
    responsibilities?: boolean
    author?: boolean | UserSettingsArgs
    authorId?: boolean
  }

  export type VacancyInclude = {
    applicants?: boolean | ApplicantsFindManyArgs
    author?: boolean | UserSettingsArgs
  }

  export type VacancyGetPayload<
    S extends boolean | null | undefined | VacancyArgs,
    U = keyof S
      > = S extends true
        ? Vacancy
    : S extends undefined
    ? never
    : S extends VacancyArgs | VacancyFindManyArgs
    ?'include' extends U
    ? Vacancy  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'applicants'
        ? Array < ApplicantsGetPayload<S['include'][P]>>  :
        P extends 'author'
        ? UserSettingsGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Vacancy ?Vacancy [P]
  : 
          P extends 'applicants'
        ? Array < ApplicantsGetPayload<S['select'][P]>>  :
        P extends 'author'
        ? UserSettingsGetPayload<S['select'][P]> : never
  } 
    : Vacancy
  : Vacancy


  type VacancyCountArgs = Merge<
    Omit<VacancyFindManyArgs, 'select' | 'include'> & {
      select?: VacancyCountAggregateInputType | true
    }
  >

  export interface VacancyDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Vacancy that matches the filter.
     * @param {VacancyFindUniqueArgs} args - Arguments to find a Vacancy
     * @example
     * // Get one Vacancy
     * const vacancy = await prisma.vacancy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VacancyFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VacancyFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Vacancy'> extends True ? CheckSelect<T, Prisma__VacancyClient<Vacancy>, Prisma__VacancyClient<VacancyGetPayload<T>>> : CheckSelect<T, Prisma__VacancyClient<Vacancy | null >, Prisma__VacancyClient<VacancyGetPayload<T> | null >>

    /**
     * Find the first Vacancy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VacancyFindFirstArgs} args - Arguments to find a Vacancy
     * @example
     * // Get one Vacancy
     * const vacancy = await prisma.vacancy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VacancyFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VacancyFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Vacancy'> extends True ? CheckSelect<T, Prisma__VacancyClient<Vacancy>, Prisma__VacancyClient<VacancyGetPayload<T>>> : CheckSelect<T, Prisma__VacancyClient<Vacancy | null >, Prisma__VacancyClient<VacancyGetPayload<T> | null >>

    /**
     * Find zero or more Vacancies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VacancyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vacancies
     * const vacancies = await prisma.vacancy.findMany()
     * 
     * // Get first 10 Vacancies
     * const vacancies = await prisma.vacancy.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vacancyWithIdOnly = await prisma.vacancy.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VacancyFindManyArgs>(
      args?: SelectSubset<T, VacancyFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Vacancy>>, PrismaPromise<Array<VacancyGetPayload<T>>>>

    /**
     * Create a Vacancy.
     * @param {VacancyCreateArgs} args - Arguments to create a Vacancy.
     * @example
     * // Create one Vacancy
     * const Vacancy = await prisma.vacancy.create({
     *   data: {
     *     // ... data to create a Vacancy
     *   }
     * })
     * 
    **/
    create<T extends VacancyCreateArgs>(
      args: SelectSubset<T, VacancyCreateArgs>
    ): CheckSelect<T, Prisma__VacancyClient<Vacancy>, Prisma__VacancyClient<VacancyGetPayload<T>>>

    /**
     * Create many Vacancies.
     *     @param {VacancyCreateManyArgs} args - Arguments to create many Vacancies.
     *     @example
     *     // Create many Vacancies
     *     const vacancy = await prisma.vacancy.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VacancyCreateManyArgs>(
      args?: SelectSubset<T, VacancyCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Vacancy.
     * @param {VacancyDeleteArgs} args - Arguments to delete one Vacancy.
     * @example
     * // Delete one Vacancy
     * const Vacancy = await prisma.vacancy.delete({
     *   where: {
     *     // ... filter to delete one Vacancy
     *   }
     * })
     * 
    **/
    delete<T extends VacancyDeleteArgs>(
      args: SelectSubset<T, VacancyDeleteArgs>
    ): CheckSelect<T, Prisma__VacancyClient<Vacancy>, Prisma__VacancyClient<VacancyGetPayload<T>>>

    /**
     * Update one Vacancy.
     * @param {VacancyUpdateArgs} args - Arguments to update one Vacancy.
     * @example
     * // Update one Vacancy
     * const vacancy = await prisma.vacancy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VacancyUpdateArgs>(
      args: SelectSubset<T, VacancyUpdateArgs>
    ): CheckSelect<T, Prisma__VacancyClient<Vacancy>, Prisma__VacancyClient<VacancyGetPayload<T>>>

    /**
     * Delete zero or more Vacancies.
     * @param {VacancyDeleteManyArgs} args - Arguments to filter Vacancies to delete.
     * @example
     * // Delete a few Vacancies
     * const { count } = await prisma.vacancy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VacancyDeleteManyArgs>(
      args?: SelectSubset<T, VacancyDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vacancies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VacancyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vacancies
     * const vacancy = await prisma.vacancy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VacancyUpdateManyArgs>(
      args: SelectSubset<T, VacancyUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Vacancy.
     * @param {VacancyUpsertArgs} args - Arguments to update or create a Vacancy.
     * @example
     * // Update or create a Vacancy
     * const vacancy = await prisma.vacancy.upsert({
     *   create: {
     *     // ... data to create a Vacancy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vacancy we want to update
     *   }
     * })
    **/
    upsert<T extends VacancyUpsertArgs>(
      args: SelectSubset<T, VacancyUpsertArgs>
    ): CheckSelect<T, Prisma__VacancyClient<Vacancy>, Prisma__VacancyClient<VacancyGetPayload<T>>>

    /**
     * Count the number of Vacancies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VacancyCountArgs} args - Arguments to filter Vacancies to count.
     * @example
     * // Count the number of Vacancies
     * const count = await prisma.vacancy.count({
     *   where: {
     *     // ... the filter for the Vacancies we want to count
     *   }
     * })
    **/
    count<T extends VacancyCountArgs>(
      args?: Subset<T, VacancyCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VacancyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vacancy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VacancyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VacancyAggregateArgs>(args: Subset<T, VacancyAggregateArgs>): PrismaPromise<GetVacancyAggregateType<T>>

    /**
     * Group by Vacancy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VacancyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VacancyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VacancyGroupByArgs['orderBy'] }
        : { orderBy?: VacancyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VacancyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVacancyGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vacancy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VacancyClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    applicants<T extends ApplicantsFindManyArgs = {}>(args?: Subset<T, ApplicantsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Applicants>>, PrismaPromise<Array<ApplicantsGetPayload<T>>>>;

    author<T extends UserSettingsArgs = {}>(args?: Subset<T, UserSettingsArgs>): CheckSelect<T, Prisma__UserSettingsClient<UserSettings | null >, Prisma__UserSettingsClient<UserSettingsGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Vacancy findUnique
   */
  export type VacancyFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Vacancy
     * 
    **/
    select?: VacancySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VacancyInclude | null
    /**
     * Throw an Error if a Vacancy can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Vacancy to fetch.
     * 
    **/
    where: VacancyWhereUniqueInput
  }


  /**
   * Vacancy findFirst
   */
  export type VacancyFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Vacancy
     * 
    **/
    select?: VacancySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VacancyInclude | null
    /**
     * Throw an Error if a Vacancy can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Vacancy to fetch.
     * 
    **/
    where?: VacancyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vacancies to fetch.
     * 
    **/
    orderBy?: Enumerable<VacancyOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vacancies.
     * 
    **/
    cursor?: VacancyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vacancies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vacancies.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vacancies.
     * 
    **/
    distinct?: Enumerable<VacancyScalarFieldEnum>
  }


  /**
   * Vacancy findMany
   */
  export type VacancyFindManyArgs = {
    /**
     * Select specific fields to fetch from the Vacancy
     * 
    **/
    select?: VacancySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VacancyInclude | null
    /**
     * Filter, which Vacancies to fetch.
     * 
    **/
    where?: VacancyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vacancies to fetch.
     * 
    **/
    orderBy?: Enumerable<VacancyOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vacancies.
     * 
    **/
    cursor?: VacancyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vacancies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vacancies.
     * 
    **/
    skip?: number
    distinct?: Enumerable<VacancyScalarFieldEnum>
  }


  /**
   * Vacancy create
   */
  export type VacancyCreateArgs = {
    /**
     * Select specific fields to fetch from the Vacancy
     * 
    **/
    select?: VacancySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VacancyInclude | null
    /**
     * The data needed to create a Vacancy.
     * 
    **/
    data: XOR<VacancyCreateInput, VacancyUncheckedCreateInput>
  }


  /**
   * Vacancy createMany
   */
  export type VacancyCreateManyArgs = {
    data: Enumerable<VacancyCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Vacancy update
   */
  export type VacancyUpdateArgs = {
    /**
     * Select specific fields to fetch from the Vacancy
     * 
    **/
    select?: VacancySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VacancyInclude | null
    /**
     * The data needed to update a Vacancy.
     * 
    **/
    data: XOR<VacancyUpdateInput, VacancyUncheckedUpdateInput>
    /**
     * Choose, which Vacancy to update.
     * 
    **/
    where: VacancyWhereUniqueInput
  }


  /**
   * Vacancy updateMany
   */
  export type VacancyUpdateManyArgs = {
    data: XOR<VacancyUpdateManyMutationInput, VacancyUncheckedUpdateManyInput>
    where?: VacancyWhereInput
  }


  /**
   * Vacancy upsert
   */
  export type VacancyUpsertArgs = {
    /**
     * Select specific fields to fetch from the Vacancy
     * 
    **/
    select?: VacancySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VacancyInclude | null
    /**
     * The filter to search for the Vacancy to update in case it exists.
     * 
    **/
    where: VacancyWhereUniqueInput
    /**
     * In case the Vacancy found by the `where` argument doesn't exist, create a new Vacancy with this data.
     * 
    **/
    create: XOR<VacancyCreateInput, VacancyUncheckedCreateInput>
    /**
     * In case the Vacancy was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<VacancyUpdateInput, VacancyUncheckedUpdateInput>
  }


  /**
   * Vacancy delete
   */
  export type VacancyDeleteArgs = {
    /**
     * Select specific fields to fetch from the Vacancy
     * 
    **/
    select?: VacancySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VacancyInclude | null
    /**
     * Filter which Vacancy to delete.
     * 
    **/
    where: VacancyWhereUniqueInput
  }


  /**
   * Vacancy deleteMany
   */
  export type VacancyDeleteManyArgs = {
    where?: VacancyWhereInput
  }


  /**
   * Vacancy without action
   */
  export type VacancyArgs = {
    /**
     * Select specific fields to fetch from the Vacancy
     * 
    **/
    select?: VacancySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VacancyInclude | null
  }



  /**
   * Model Applicants
   */


  export type AggregateApplicants = {
    _count: ApplicantsCountAggregateOutputType | null
    count: ApplicantsCountAggregateOutputType | null
    _min: ApplicantsMinAggregateOutputType | null
    min: ApplicantsMinAggregateOutputType | null
    _max: ApplicantsMaxAggregateOutputType | null
    max: ApplicantsMaxAggregateOutputType | null
  }

  export type ApplicantsMinAggregateOutputType = {
    id: string | null
    name: string | null
    currentJob: string | null
    location: string | null
    email: string | null
    phoneNumber: string | null
    cvLink: string | null
    vacancyId: string | null
  }

  export type ApplicantsMaxAggregateOutputType = {
    id: string | null
    name: string | null
    currentJob: string | null
    location: string | null
    email: string | null
    phoneNumber: string | null
    cvLink: string | null
    vacancyId: string | null
  }

  export type ApplicantsCountAggregateOutputType = {
    id: number
    name: number
    currentJob: number
    location: number
    email: number
    phoneNumber: number
    cvLink: number
    vacancyId: number
    _all: number
  }


  export type ApplicantsMinAggregateInputType = {
    id?: true
    name?: true
    currentJob?: true
    location?: true
    email?: true
    phoneNumber?: true
    cvLink?: true
    vacancyId?: true
  }

  export type ApplicantsMaxAggregateInputType = {
    id?: true
    name?: true
    currentJob?: true
    location?: true
    email?: true
    phoneNumber?: true
    cvLink?: true
    vacancyId?: true
  }

  export type ApplicantsCountAggregateInputType = {
    id?: true
    name?: true
    currentJob?: true
    location?: true
    email?: true
    phoneNumber?: true
    cvLink?: true
    vacancyId?: true
    _all?: true
  }

  export type ApplicantsAggregateArgs = {
    /**
     * Filter which Applicants to aggregate.
     * 
    **/
    where?: ApplicantsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applicants to fetch.
     * 
    **/
    orderBy?: Enumerable<ApplicantsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ApplicantsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applicants from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applicants.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Applicants
    **/
    _count?: true | ApplicantsCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | ApplicantsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApplicantsMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: ApplicantsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApplicantsMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: ApplicantsMaxAggregateInputType
  }

  export type GetApplicantsAggregateType<T extends ApplicantsAggregateArgs> = {
        [P in keyof T & keyof AggregateApplicants]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApplicants[P]>
      : GetScalarType<T[P], AggregateApplicants[P]>
  }


    
    
  export type ApplicantsGroupByArgs = {
    where?: ApplicantsWhereInput
    orderBy?: Enumerable<ApplicantsOrderByInput>
    by: Array<ApplicantsScalarFieldEnum>
    having?: ApplicantsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApplicantsCountAggregateInputType | true
    _min?: ApplicantsMinAggregateInputType
    _max?: ApplicantsMaxAggregateInputType
  }


  export type ApplicantsGroupByOutputType = {
    id: string
    name: string
    currentJob: string
    location: string
    email: string
    phoneNumber: string
    cvLink: string
    vacancyId: string
    _count: ApplicantsCountAggregateOutputType | null
    _min: ApplicantsMinAggregateOutputType | null
    _max: ApplicantsMaxAggregateOutputType | null
  }

  type GetApplicantsGroupByPayload<T extends ApplicantsGroupByArgs> = Promise<
    Array<
      PickArray<ApplicantsGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof ApplicantsGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], ApplicantsGroupByOutputType[P]> 
            : GetScalarType<T[P], ApplicantsGroupByOutputType[P]>
        }
      > 
    >


  export type ApplicantsSelect = {
    id?: boolean
    name?: boolean
    currentJob?: boolean
    location?: boolean
    email?: boolean
    phoneNumber?: boolean
    cvLink?: boolean
    vacancy?: boolean | VacancyArgs
    vacancyId?: boolean
  }

  export type ApplicantsInclude = {
    vacancy?: boolean | VacancyArgs
  }

  export type ApplicantsGetPayload<
    S extends boolean | null | undefined | ApplicantsArgs,
    U = keyof S
      > = S extends true
        ? Applicants
    : S extends undefined
    ? never
    : S extends ApplicantsArgs | ApplicantsFindManyArgs
    ?'include' extends U
    ? Applicants  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'vacancy'
        ? VacancyGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Applicants ?Applicants [P]
  : 
          P extends 'vacancy'
        ? VacancyGetPayload<S['select'][P]> : never
  } 
    : Applicants
  : Applicants


  type ApplicantsCountArgs = Merge<
    Omit<ApplicantsFindManyArgs, 'select' | 'include'> & {
      select?: ApplicantsCountAggregateInputType | true
    }
  >

  export interface ApplicantsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Applicants that matches the filter.
     * @param {ApplicantsFindUniqueArgs} args - Arguments to find a Applicants
     * @example
     * // Get one Applicants
     * const applicants = await prisma.applicants.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ApplicantsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ApplicantsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Applicants'> extends True ? CheckSelect<T, Prisma__ApplicantsClient<Applicants>, Prisma__ApplicantsClient<ApplicantsGetPayload<T>>> : CheckSelect<T, Prisma__ApplicantsClient<Applicants | null >, Prisma__ApplicantsClient<ApplicantsGetPayload<T> | null >>

    /**
     * Find the first Applicants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicantsFindFirstArgs} args - Arguments to find a Applicants
     * @example
     * // Get one Applicants
     * const applicants = await prisma.applicants.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ApplicantsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ApplicantsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Applicants'> extends True ? CheckSelect<T, Prisma__ApplicantsClient<Applicants>, Prisma__ApplicantsClient<ApplicantsGetPayload<T>>> : CheckSelect<T, Prisma__ApplicantsClient<Applicants | null >, Prisma__ApplicantsClient<ApplicantsGetPayload<T> | null >>

    /**
     * Find zero or more Applicants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicantsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Applicants
     * const applicants = await prisma.applicants.findMany()
     * 
     * // Get first 10 Applicants
     * const applicants = await prisma.applicants.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const applicantsWithIdOnly = await prisma.applicants.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ApplicantsFindManyArgs>(
      args?: SelectSubset<T, ApplicantsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Applicants>>, PrismaPromise<Array<ApplicantsGetPayload<T>>>>

    /**
     * Create a Applicants.
     * @param {ApplicantsCreateArgs} args - Arguments to create a Applicants.
     * @example
     * // Create one Applicants
     * const Applicants = await prisma.applicants.create({
     *   data: {
     *     // ... data to create a Applicants
     *   }
     * })
     * 
    **/
    create<T extends ApplicantsCreateArgs>(
      args: SelectSubset<T, ApplicantsCreateArgs>
    ): CheckSelect<T, Prisma__ApplicantsClient<Applicants>, Prisma__ApplicantsClient<ApplicantsGetPayload<T>>>

    /**
     * Create many Applicants.
     *     @param {ApplicantsCreateManyArgs} args - Arguments to create many Applicants.
     *     @example
     *     // Create many Applicants
     *     const applicants = await prisma.applicants.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ApplicantsCreateManyArgs>(
      args?: SelectSubset<T, ApplicantsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Applicants.
     * @param {ApplicantsDeleteArgs} args - Arguments to delete one Applicants.
     * @example
     * // Delete one Applicants
     * const Applicants = await prisma.applicants.delete({
     *   where: {
     *     // ... filter to delete one Applicants
     *   }
     * })
     * 
    **/
    delete<T extends ApplicantsDeleteArgs>(
      args: SelectSubset<T, ApplicantsDeleteArgs>
    ): CheckSelect<T, Prisma__ApplicantsClient<Applicants>, Prisma__ApplicantsClient<ApplicantsGetPayload<T>>>

    /**
     * Update one Applicants.
     * @param {ApplicantsUpdateArgs} args - Arguments to update one Applicants.
     * @example
     * // Update one Applicants
     * const applicants = await prisma.applicants.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ApplicantsUpdateArgs>(
      args: SelectSubset<T, ApplicantsUpdateArgs>
    ): CheckSelect<T, Prisma__ApplicantsClient<Applicants>, Prisma__ApplicantsClient<ApplicantsGetPayload<T>>>

    /**
     * Delete zero or more Applicants.
     * @param {ApplicantsDeleteManyArgs} args - Arguments to filter Applicants to delete.
     * @example
     * // Delete a few Applicants
     * const { count } = await prisma.applicants.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ApplicantsDeleteManyArgs>(
      args?: SelectSubset<T, ApplicantsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Applicants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicantsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Applicants
     * const applicants = await prisma.applicants.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ApplicantsUpdateManyArgs>(
      args: SelectSubset<T, ApplicantsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Applicants.
     * @param {ApplicantsUpsertArgs} args - Arguments to update or create a Applicants.
     * @example
     * // Update or create a Applicants
     * const applicants = await prisma.applicants.upsert({
     *   create: {
     *     // ... data to create a Applicants
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Applicants we want to update
     *   }
     * })
    **/
    upsert<T extends ApplicantsUpsertArgs>(
      args: SelectSubset<T, ApplicantsUpsertArgs>
    ): CheckSelect<T, Prisma__ApplicantsClient<Applicants>, Prisma__ApplicantsClient<ApplicantsGetPayload<T>>>

    /**
     * Count the number of Applicants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicantsCountArgs} args - Arguments to filter Applicants to count.
     * @example
     * // Count the number of Applicants
     * const count = await prisma.applicants.count({
     *   where: {
     *     // ... the filter for the Applicants we want to count
     *   }
     * })
    **/
    count<T extends ApplicantsCountArgs>(
      args?: Subset<T, ApplicantsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApplicantsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Applicants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicantsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApplicantsAggregateArgs>(args: Subset<T, ApplicantsAggregateArgs>): PrismaPromise<GetApplicantsAggregateType<T>>

    /**
     * Group by Applicants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicantsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApplicantsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApplicantsGroupByArgs['orderBy'] }
        : { orderBy?: ApplicantsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApplicantsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApplicantsGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Applicants.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ApplicantsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    vacancy<T extends VacancyArgs = {}>(args?: Subset<T, VacancyArgs>): CheckSelect<T, Prisma__VacancyClient<Vacancy | null >, Prisma__VacancyClient<VacancyGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Applicants findUnique
   */
  export type ApplicantsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Applicants
     * 
    **/
    select?: ApplicantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApplicantsInclude | null
    /**
     * Throw an Error if a Applicants can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Applicants to fetch.
     * 
    **/
    where: ApplicantsWhereUniqueInput
  }


  /**
   * Applicants findFirst
   */
  export type ApplicantsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Applicants
     * 
    **/
    select?: ApplicantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApplicantsInclude | null
    /**
     * Throw an Error if a Applicants can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Applicants to fetch.
     * 
    **/
    where?: ApplicantsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applicants to fetch.
     * 
    **/
    orderBy?: Enumerable<ApplicantsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Applicants.
     * 
    **/
    cursor?: ApplicantsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applicants from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applicants.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Applicants.
     * 
    **/
    distinct?: Enumerable<ApplicantsScalarFieldEnum>
  }


  /**
   * Applicants findMany
   */
  export type ApplicantsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Applicants
     * 
    **/
    select?: ApplicantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApplicantsInclude | null
    /**
     * Filter, which Applicants to fetch.
     * 
    **/
    where?: ApplicantsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applicants to fetch.
     * 
    **/
    orderBy?: Enumerable<ApplicantsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Applicants.
     * 
    **/
    cursor?: ApplicantsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applicants from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applicants.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ApplicantsScalarFieldEnum>
  }


  /**
   * Applicants create
   */
  export type ApplicantsCreateArgs = {
    /**
     * Select specific fields to fetch from the Applicants
     * 
    **/
    select?: ApplicantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApplicantsInclude | null
    /**
     * The data needed to create a Applicants.
     * 
    **/
    data: XOR<ApplicantsCreateInput, ApplicantsUncheckedCreateInput>
  }


  /**
   * Applicants createMany
   */
  export type ApplicantsCreateManyArgs = {
    data: Enumerable<ApplicantsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Applicants update
   */
  export type ApplicantsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Applicants
     * 
    **/
    select?: ApplicantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApplicantsInclude | null
    /**
     * The data needed to update a Applicants.
     * 
    **/
    data: XOR<ApplicantsUpdateInput, ApplicantsUncheckedUpdateInput>
    /**
     * Choose, which Applicants to update.
     * 
    **/
    where: ApplicantsWhereUniqueInput
  }


  /**
   * Applicants updateMany
   */
  export type ApplicantsUpdateManyArgs = {
    data: XOR<ApplicantsUpdateManyMutationInput, ApplicantsUncheckedUpdateManyInput>
    where?: ApplicantsWhereInput
  }


  /**
   * Applicants upsert
   */
  export type ApplicantsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Applicants
     * 
    **/
    select?: ApplicantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApplicantsInclude | null
    /**
     * The filter to search for the Applicants to update in case it exists.
     * 
    **/
    where: ApplicantsWhereUniqueInput
    /**
     * In case the Applicants found by the `where` argument doesn't exist, create a new Applicants with this data.
     * 
    **/
    create: XOR<ApplicantsCreateInput, ApplicantsUncheckedCreateInput>
    /**
     * In case the Applicants was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ApplicantsUpdateInput, ApplicantsUncheckedUpdateInput>
  }


  /**
   * Applicants delete
   */
  export type ApplicantsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Applicants
     * 
    **/
    select?: ApplicantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApplicantsInclude | null
    /**
     * Filter which Applicants to delete.
     * 
    **/
    where: ApplicantsWhereUniqueInput
  }


  /**
   * Applicants deleteMany
   */
  export type ApplicantsDeleteManyArgs = {
    where?: ApplicantsWhereInput
  }


  /**
   * Applicants without action
   */
  export type ApplicantsArgs = {
    /**
     * Select specific fields to fetch from the Applicants
     * 
    **/
    select?: ApplicantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApplicantsInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserSettingsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    firstName: 'firstName',
    sirname: 'sirname',
    company: 'company',
    subscription: 'subscription'
  };

  export type UserSettingsScalarFieldEnum = (typeof UserSettingsScalarFieldEnum)[keyof typeof UserSettingsScalarFieldEnum]


  export const VacancyScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    title: 'title',
    company: 'company',
    location: 'location',
    salary: 'salary',
    endDate: 'endDate',
    jobDescription: 'jobDescription',
    companyDescription: 'companyDescription',
    salaryMin: 'salaryMin',
    salaryMax: 'salaryMax',
    requirementEssential: 'requirementEssential',
    requirementDesired: 'requirementDesired',
    responsibilities: 'responsibilities',
    authorId: 'authorId'
  };

  export type VacancyScalarFieldEnum = (typeof VacancyScalarFieldEnum)[keyof typeof VacancyScalarFieldEnum]


  export const ApplicantsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    currentJob: 'currentJob',
    location: 'location',
    email: 'email',
    phoneNumber: 'phoneNumber',
    cvLink: 'cvLink',
    vacancyId: 'vacancyId'
  };

  export type ApplicantsScalarFieldEnum = (typeof ApplicantsScalarFieldEnum)[keyof typeof ApplicantsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    settings?: UserSettingsListRelationFilter
  }

  export type UserOrderByInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
  }

  export type UserSettingsWhereInput = {
    AND?: Enumerable<UserSettingsWhereInput>
    OR?: Enumerable<UserSettingsWhereInput>
    NOT?: Enumerable<UserSettingsWhereInput>
    id?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: StringFilter | string
    firstName?: StringFilter | string
    sirname?: StringFilter | string
    company?: StringNullableFilter | string | null
    subscription?: StringFilter | string
    vacancies?: VacancyListRelationFilter
  }

  export type UserSettingsOrderByInput = {
    id?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    sirname?: SortOrder
    company?: SortOrder
    subscription?: SortOrder
  }

  export type UserSettingsWhereUniqueInput = {
    id?: string
  }

  export type UserSettingsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserSettingsScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserSettingsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserSettingsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    firstName?: StringWithAggregatesFilter | string
    sirname?: StringWithAggregatesFilter | string
    company?: StringNullableWithAggregatesFilter | string | null
    subscription?: StringWithAggregatesFilter | string
  }

  export type VacancyWhereInput = {
    AND?: Enumerable<VacancyWhereInput>
    OR?: Enumerable<VacancyWhereInput>
    NOT?: Enumerable<VacancyWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    title?: StringFilter | string
    company?: StringFilter | string
    location?: StringFilter | string
    salary?: IntFilter | number
    applicants?: ApplicantsListRelationFilter
    endDate?: StringFilter | string
    jobDescription?: StringFilter | string
    companyDescription?: StringFilter | string
    salaryMin?: IntNullableFilter | number | null
    salaryMax?: IntNullableFilter | number | null
    requirementEssential?: StringNullableListFilter
    requirementDesired?: StringNullableListFilter
    responsibilities?: StringNullableListFilter
    author?: XOR<UserSettingsRelationFilter, UserSettingsWhereInput>
    authorId?: StringFilter | string
  }

  export type VacancyOrderByInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    company?: SortOrder
    location?: SortOrder
    salary?: SortOrder
    endDate?: SortOrder
    jobDescription?: SortOrder
    companyDescription?: SortOrder
    salaryMin?: SortOrder
    salaryMax?: SortOrder
    requirementEssential?: SortOrder
    requirementDesired?: SortOrder
    responsibilities?: SortOrder
    authorId?: SortOrder
  }

  export type VacancyWhereUniqueInput = {
    id?: string
  }

  export type VacancyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VacancyScalarWhereWithAggregatesInput>
    OR?: Enumerable<VacancyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VacancyScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    title?: StringWithAggregatesFilter | string
    company?: StringWithAggregatesFilter | string
    location?: StringWithAggregatesFilter | string
    salary?: IntWithAggregatesFilter | number
    endDate?: StringWithAggregatesFilter | string
    jobDescription?: StringWithAggregatesFilter | string
    companyDescription?: StringWithAggregatesFilter | string
    salaryMin?: IntNullableWithAggregatesFilter | number | null
    salaryMax?: IntNullableWithAggregatesFilter | number | null
    requirementEssential?: StringNullableListFilter
    requirementDesired?: StringNullableListFilter
    responsibilities?: StringNullableListFilter
    authorId?: StringWithAggregatesFilter | string
  }

  export type ApplicantsWhereInput = {
    AND?: Enumerable<ApplicantsWhereInput>
    OR?: Enumerable<ApplicantsWhereInput>
    NOT?: Enumerable<ApplicantsWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    currentJob?: StringFilter | string
    location?: StringFilter | string
    email?: StringFilter | string
    phoneNumber?: StringFilter | string
    cvLink?: StringFilter | string
    vacancy?: XOR<VacancyRelationFilter, VacancyWhereInput>
    vacancyId?: StringFilter | string
  }

  export type ApplicantsOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    currentJob?: SortOrder
    location?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    cvLink?: SortOrder
    vacancyId?: SortOrder
  }

  export type ApplicantsWhereUniqueInput = {
    id?: string
  }

  export type ApplicantsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ApplicantsScalarWhereWithAggregatesInput>
    OR?: Enumerable<ApplicantsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ApplicantsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    currentJob?: StringWithAggregatesFilter | string
    location?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    phoneNumber?: StringWithAggregatesFilter | string
    cvLink?: StringWithAggregatesFilter | string
    vacancyId?: StringWithAggregatesFilter | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    settings?: UserSettingsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    settings?: UserSettingsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    settings?: UserSettingsUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    settings?: UserSettingsUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserSettingsCreateInput = {
    id?: string
    firstName: string
    sirname: string
    company?: string | null
    subscription: string
    user: UserCreateNestedOneWithoutSettingsInput
    vacancies?: VacancyCreateNestedManyWithoutAuthorInput
  }

  export type UserSettingsUncheckedCreateInput = {
    id?: string
    userId: string
    firstName: string
    sirname: string
    company?: string | null
    subscription: string
    vacancies?: VacancyUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserSettingsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    sirname?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    subscription?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutSettingsInput
    vacancies?: VacancyUpdateManyWithoutAuthorInput
  }

  export type UserSettingsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    sirname?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    subscription?: StringFieldUpdateOperationsInput | string
    vacancies?: VacancyUncheckedUpdateManyWithoutAuthorInput
  }

  export type UserSettingsCreateManyInput = {
    id?: string
    userId: string
    firstName: string
    sirname: string
    company?: string | null
    subscription: string
  }

  export type UserSettingsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    sirname?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    subscription?: StringFieldUpdateOperationsInput | string
  }

  export type UserSettingsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    sirname?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    subscription?: StringFieldUpdateOperationsInput | string
  }

  export type VacancyCreateInput = {
    id?: string
    createdAt?: Date | string
    title: string
    company: string
    location: string
    salary: number
    endDate: string
    jobDescription: string
    companyDescription: string
    salaryMin?: number | null
    salaryMax?: number | null
    requirementEssential?: VacancyCreaterequirementEssentialInput | Enumerable<string>
    requirementDesired?: VacancyCreaterequirementDesiredInput | Enumerable<string>
    responsibilities?: VacancyCreateresponsibilitiesInput | Enumerable<string>
    applicants?: ApplicantsCreateNestedManyWithoutVacancyInput
    author: UserSettingsCreateNestedOneWithoutVacanciesInput
  }

  export type VacancyUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    title: string
    company: string
    location: string
    salary: number
    endDate: string
    jobDescription: string
    companyDescription: string
    salaryMin?: number | null
    salaryMax?: number | null
    authorId: string
    requirementEssential?: VacancyCreaterequirementEssentialInput | Enumerable<string>
    requirementDesired?: VacancyCreaterequirementDesiredInput | Enumerable<string>
    responsibilities?: VacancyCreateresponsibilitiesInput | Enumerable<string>
    applicants?: ApplicantsUncheckedCreateNestedManyWithoutVacancyInput
  }

  export type VacancyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    salary?: IntFieldUpdateOperationsInput | number
    endDate?: StringFieldUpdateOperationsInput | string
    jobDescription?: StringFieldUpdateOperationsInput | string
    companyDescription?: StringFieldUpdateOperationsInput | string
    salaryMin?: NullableIntFieldUpdateOperationsInput | number | null
    salaryMax?: NullableIntFieldUpdateOperationsInput | number | null
    requirementEssential?: VacancyUpdaterequirementEssentialInput | Enumerable<string>
    requirementDesired?: VacancyUpdaterequirementDesiredInput | Enumerable<string>
    responsibilities?: VacancyUpdateresponsibilitiesInput | Enumerable<string>
    applicants?: ApplicantsUpdateManyWithoutVacancyInput
    author?: UserSettingsUpdateOneRequiredWithoutVacanciesInput
  }

  export type VacancyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    salary?: IntFieldUpdateOperationsInput | number
    endDate?: StringFieldUpdateOperationsInput | string
    jobDescription?: StringFieldUpdateOperationsInput | string
    companyDescription?: StringFieldUpdateOperationsInput | string
    salaryMin?: NullableIntFieldUpdateOperationsInput | number | null
    salaryMax?: NullableIntFieldUpdateOperationsInput | number | null
    authorId?: StringFieldUpdateOperationsInput | string
    requirementEssential?: VacancyUpdaterequirementEssentialInput | Enumerable<string>
    requirementDesired?: VacancyUpdaterequirementDesiredInput | Enumerable<string>
    responsibilities?: VacancyUpdateresponsibilitiesInput | Enumerable<string>
    applicants?: ApplicantsUncheckedUpdateManyWithoutVacancyInput
  }

  export type VacancyCreateManyInput = {
    id?: string
    createdAt?: Date | string
    title: string
    company: string
    location: string
    salary: number
    endDate: string
    jobDescription: string
    companyDescription: string
    salaryMin?: number | null
    salaryMax?: number | null
    authorId: string
    requirementEssential?: VacancyCreateManyrequirementEssentialInput | Enumerable<string>
    requirementDesired?: VacancyCreateManyrequirementDesiredInput | Enumerable<string>
    responsibilities?: VacancyCreateManyresponsibilitiesInput | Enumerable<string>
  }

  export type VacancyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    salary?: IntFieldUpdateOperationsInput | number
    endDate?: StringFieldUpdateOperationsInput | string
    jobDescription?: StringFieldUpdateOperationsInput | string
    companyDescription?: StringFieldUpdateOperationsInput | string
    salaryMin?: NullableIntFieldUpdateOperationsInput | number | null
    salaryMax?: NullableIntFieldUpdateOperationsInput | number | null
    requirementEssential?: VacancyUpdaterequirementEssentialInput | Enumerable<string>
    requirementDesired?: VacancyUpdaterequirementDesiredInput | Enumerable<string>
    responsibilities?: VacancyUpdateresponsibilitiesInput | Enumerable<string>
  }

  export type VacancyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    salary?: IntFieldUpdateOperationsInput | number
    endDate?: StringFieldUpdateOperationsInput | string
    jobDescription?: StringFieldUpdateOperationsInput | string
    companyDescription?: StringFieldUpdateOperationsInput | string
    salaryMin?: NullableIntFieldUpdateOperationsInput | number | null
    salaryMax?: NullableIntFieldUpdateOperationsInput | number | null
    authorId?: StringFieldUpdateOperationsInput | string
    requirementEssential?: VacancyUpdaterequirementEssentialInput | Enumerable<string>
    requirementDesired?: VacancyUpdaterequirementDesiredInput | Enumerable<string>
    responsibilities?: VacancyUpdateresponsibilitiesInput | Enumerable<string>
  }

  export type ApplicantsCreateInput = {
    id?: string
    name: string
    currentJob: string
    location: string
    email: string
    phoneNumber: string
    cvLink: string
    vacancy: VacancyCreateNestedOneWithoutApplicantsInput
  }

  export type ApplicantsUncheckedCreateInput = {
    id?: string
    name: string
    currentJob: string
    location: string
    email: string
    phoneNumber: string
    cvLink: string
    vacancyId: string
  }

  export type ApplicantsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    currentJob?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    cvLink?: StringFieldUpdateOperationsInput | string
    vacancy?: VacancyUpdateOneRequiredWithoutApplicantsInput
  }

  export type ApplicantsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    currentJob?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    cvLink?: StringFieldUpdateOperationsInput | string
    vacancyId?: StringFieldUpdateOperationsInput | string
  }

  export type ApplicantsCreateManyInput = {
    id?: string
    name: string
    currentJob: string
    location: string
    email: string
    phoneNumber: string
    cvLink: string
    vacancyId: string
  }

  export type ApplicantsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    currentJob?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    cvLink?: StringFieldUpdateOperationsInput | string
  }

  export type ApplicantsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    currentJob?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    cvLink?: StringFieldUpdateOperationsInput | string
    vacancyId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type UserSettingsListRelationFilter = {
    every?: UserSettingsWhereInput
    some?: UserSettingsWhereInput
    none?: UserSettingsWhereInput
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type VacancyListRelationFilter = {
    every?: VacancyWhereInput
    some?: VacancyWhereInput
    none?: VacancyWhereInput
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringNullableFilter
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type ApplicantsListRelationFilter = {
    every?: ApplicantsWhereInput
    some?: ApplicantsWhereInput
    none?: ApplicantsWhereInput
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type StringNullableListFilter = {
    equals?: Enumerable<string> | null
    has?: string | null
    hasEvery?: Enumerable<string>
    hasSome?: Enumerable<string>
    isEmpty?: boolean
  }

  export type UserSettingsRelationFilter = {
    is?: UserSettingsWhereInput
    isNot?: UserSettingsWhereInput
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntNullableFilter
  }

  export type VacancyRelationFilter = {
    is?: VacancyWhereInput
    isNot?: VacancyWhereInput
  }

  export type UserSettingsCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserSettingsCreateWithoutUserInput>, Enumerable<UserSettingsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserSettingsCreateOrConnectWithoutUserInput>
    createMany?: UserSettingsCreateManyUserInputEnvelope
    connect?: Enumerable<UserSettingsWhereUniqueInput>
  }

  export type UserSettingsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserSettingsCreateWithoutUserInput>, Enumerable<UserSettingsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserSettingsCreateOrConnectWithoutUserInput>
    createMany?: UserSettingsCreateManyUserInputEnvelope
    connect?: Enumerable<UserSettingsWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserSettingsUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<UserSettingsCreateWithoutUserInput>, Enumerable<UserSettingsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserSettingsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserSettingsUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserSettingsCreateManyUserInputEnvelope
    connect?: Enumerable<UserSettingsWhereUniqueInput>
    set?: Enumerable<UserSettingsWhereUniqueInput>
    disconnect?: Enumerable<UserSettingsWhereUniqueInput>
    delete?: Enumerable<UserSettingsWhereUniqueInput>
    update?: Enumerable<UserSettingsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserSettingsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserSettingsScalarWhereInput>
  }

  export type UserSettingsUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<UserSettingsCreateWithoutUserInput>, Enumerable<UserSettingsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserSettingsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserSettingsUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserSettingsCreateManyUserInputEnvelope
    connect?: Enumerable<UserSettingsWhereUniqueInput>
    set?: Enumerable<UserSettingsWhereUniqueInput>
    disconnect?: Enumerable<UserSettingsWhereUniqueInput>
    delete?: Enumerable<UserSettingsWhereUniqueInput>
    update?: Enumerable<UserSettingsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserSettingsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserSettingsScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutSettingsInput = {
    create?: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSettingsInput
    connect?: UserWhereUniqueInput
  }

  export type VacancyCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<VacancyCreateWithoutAuthorInput>, Enumerable<VacancyUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<VacancyCreateOrConnectWithoutAuthorInput>
    createMany?: VacancyCreateManyAuthorInputEnvelope
    connect?: Enumerable<VacancyWhereUniqueInput>
  }

  export type VacancyUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<VacancyCreateWithoutAuthorInput>, Enumerable<VacancyUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<VacancyCreateOrConnectWithoutAuthorInput>
    createMany?: VacancyCreateManyAuthorInputEnvelope
    connect?: Enumerable<VacancyWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateOneRequiredWithoutSettingsInput = {
    create?: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSettingsInput
    upsert?: UserUpsertWithoutSettingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSettingsInput, UserUncheckedUpdateWithoutSettingsInput>
  }

  export type VacancyUpdateManyWithoutAuthorInput = {
    create?: XOR<Enumerable<VacancyCreateWithoutAuthorInput>, Enumerable<VacancyUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<VacancyCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<VacancyUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: VacancyCreateManyAuthorInputEnvelope
    connect?: Enumerable<VacancyWhereUniqueInput>
    set?: Enumerable<VacancyWhereUniqueInput>
    disconnect?: Enumerable<VacancyWhereUniqueInput>
    delete?: Enumerable<VacancyWhereUniqueInput>
    update?: Enumerable<VacancyUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<VacancyUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<VacancyScalarWhereInput>
  }

  export type VacancyUncheckedUpdateManyWithoutAuthorInput = {
    create?: XOR<Enumerable<VacancyCreateWithoutAuthorInput>, Enumerable<VacancyUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<VacancyCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<VacancyUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: VacancyCreateManyAuthorInputEnvelope
    connect?: Enumerable<VacancyWhereUniqueInput>
    set?: Enumerable<VacancyWhereUniqueInput>
    disconnect?: Enumerable<VacancyWhereUniqueInput>
    delete?: Enumerable<VacancyWhereUniqueInput>
    update?: Enumerable<VacancyUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<VacancyUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<VacancyScalarWhereInput>
  }

  export type VacancyCreaterequirementEssentialInput = {
    set: Enumerable<string>
  }

  export type VacancyCreaterequirementDesiredInput = {
    set: Enumerable<string>
  }

  export type VacancyCreateresponsibilitiesInput = {
    set: Enumerable<string>
  }

  export type ApplicantsCreateNestedManyWithoutVacancyInput = {
    create?: XOR<Enumerable<ApplicantsCreateWithoutVacancyInput>, Enumerable<ApplicantsUncheckedCreateWithoutVacancyInput>>
    connectOrCreate?: Enumerable<ApplicantsCreateOrConnectWithoutVacancyInput>
    createMany?: ApplicantsCreateManyVacancyInputEnvelope
    connect?: Enumerable<ApplicantsWhereUniqueInput>
  }

  export type UserSettingsCreateNestedOneWithoutVacanciesInput = {
    create?: XOR<UserSettingsCreateWithoutVacanciesInput, UserSettingsUncheckedCreateWithoutVacanciesInput>
    connectOrCreate?: UserSettingsCreateOrConnectWithoutVacanciesInput
    connect?: UserSettingsWhereUniqueInput
  }

  export type ApplicantsUncheckedCreateNestedManyWithoutVacancyInput = {
    create?: XOR<Enumerable<ApplicantsCreateWithoutVacancyInput>, Enumerable<ApplicantsUncheckedCreateWithoutVacancyInput>>
    connectOrCreate?: Enumerable<ApplicantsCreateOrConnectWithoutVacancyInput>
    createMany?: ApplicantsCreateManyVacancyInputEnvelope
    connect?: Enumerable<ApplicantsWhereUniqueInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type VacancyUpdaterequirementEssentialInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type VacancyUpdaterequirementDesiredInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type VacancyUpdateresponsibilitiesInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type ApplicantsUpdateManyWithoutVacancyInput = {
    create?: XOR<Enumerable<ApplicantsCreateWithoutVacancyInput>, Enumerable<ApplicantsUncheckedCreateWithoutVacancyInput>>
    connectOrCreate?: Enumerable<ApplicantsCreateOrConnectWithoutVacancyInput>
    upsert?: Enumerable<ApplicantsUpsertWithWhereUniqueWithoutVacancyInput>
    createMany?: ApplicantsCreateManyVacancyInputEnvelope
    connect?: Enumerable<ApplicantsWhereUniqueInput>
    set?: Enumerable<ApplicantsWhereUniqueInput>
    disconnect?: Enumerable<ApplicantsWhereUniqueInput>
    delete?: Enumerable<ApplicantsWhereUniqueInput>
    update?: Enumerable<ApplicantsUpdateWithWhereUniqueWithoutVacancyInput>
    updateMany?: Enumerable<ApplicantsUpdateManyWithWhereWithoutVacancyInput>
    deleteMany?: Enumerable<ApplicantsScalarWhereInput>
  }

  export type UserSettingsUpdateOneRequiredWithoutVacanciesInput = {
    create?: XOR<UserSettingsCreateWithoutVacanciesInput, UserSettingsUncheckedCreateWithoutVacanciesInput>
    connectOrCreate?: UserSettingsCreateOrConnectWithoutVacanciesInput
    upsert?: UserSettingsUpsertWithoutVacanciesInput
    connect?: UserSettingsWhereUniqueInput
    update?: XOR<UserSettingsUpdateWithoutVacanciesInput, UserSettingsUncheckedUpdateWithoutVacanciesInput>
  }

  export type ApplicantsUncheckedUpdateManyWithoutVacancyInput = {
    create?: XOR<Enumerable<ApplicantsCreateWithoutVacancyInput>, Enumerable<ApplicantsUncheckedCreateWithoutVacancyInput>>
    connectOrCreate?: Enumerable<ApplicantsCreateOrConnectWithoutVacancyInput>
    upsert?: Enumerable<ApplicantsUpsertWithWhereUniqueWithoutVacancyInput>
    createMany?: ApplicantsCreateManyVacancyInputEnvelope
    connect?: Enumerable<ApplicantsWhereUniqueInput>
    set?: Enumerable<ApplicantsWhereUniqueInput>
    disconnect?: Enumerable<ApplicantsWhereUniqueInput>
    delete?: Enumerable<ApplicantsWhereUniqueInput>
    update?: Enumerable<ApplicantsUpdateWithWhereUniqueWithoutVacancyInput>
    updateMany?: Enumerable<ApplicantsUpdateManyWithWhereWithoutVacancyInput>
    deleteMany?: Enumerable<ApplicantsScalarWhereInput>
  }

  export type VacancyCreateManyrequirementEssentialInput = {
    set: Enumerable<string>
  }

  export type VacancyCreateManyrequirementDesiredInput = {
    set: Enumerable<string>
  }

  export type VacancyCreateManyresponsibilitiesInput = {
    set: Enumerable<string>
  }

  export type VacancyCreateNestedOneWithoutApplicantsInput = {
    create?: XOR<VacancyCreateWithoutApplicantsInput, VacancyUncheckedCreateWithoutApplicantsInput>
    connectOrCreate?: VacancyCreateOrConnectWithoutApplicantsInput
    connect?: VacancyWhereUniqueInput
  }

  export type VacancyUpdateOneRequiredWithoutApplicantsInput = {
    create?: XOR<VacancyCreateWithoutApplicantsInput, VacancyUncheckedCreateWithoutApplicantsInput>
    connectOrCreate?: VacancyCreateOrConnectWithoutApplicantsInput
    upsert?: VacancyUpsertWithoutApplicantsInput
    connect?: VacancyWhereUniqueInput
    update?: XOR<VacancyUpdateWithoutApplicantsInput, VacancyUncheckedUpdateWithoutApplicantsInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type UserSettingsCreateWithoutUserInput = {
    id?: string
    firstName: string
    sirname: string
    company?: string | null
    subscription: string
    vacancies?: VacancyCreateNestedManyWithoutAuthorInput
  }

  export type UserSettingsUncheckedCreateWithoutUserInput = {
    id?: string
    firstName: string
    sirname: string
    company?: string | null
    subscription: string
    vacancies?: VacancyUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserSettingsCreateOrConnectWithoutUserInput = {
    where: UserSettingsWhereUniqueInput
    create: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput>
  }

  export type UserSettingsCreateManyUserInputEnvelope = {
    data: Enumerable<UserSettingsCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type UserSettingsUpsertWithWhereUniqueWithoutUserInput = {
    where: UserSettingsWhereUniqueInput
    update: XOR<UserSettingsUpdateWithoutUserInput, UserSettingsUncheckedUpdateWithoutUserInput>
    create: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput>
  }

  export type UserSettingsUpdateWithWhereUniqueWithoutUserInput = {
    where: UserSettingsWhereUniqueInput
    data: XOR<UserSettingsUpdateWithoutUserInput, UserSettingsUncheckedUpdateWithoutUserInput>
  }

  export type UserSettingsUpdateManyWithWhereWithoutUserInput = {
    where: UserSettingsScalarWhereInput
    data: XOR<UserSettingsUpdateManyMutationInput, UserSettingsUncheckedUpdateManyWithoutSettingsInput>
  }

  export type UserSettingsScalarWhereInput = {
    AND?: Enumerable<UserSettingsScalarWhereInput>
    OR?: Enumerable<UserSettingsScalarWhereInput>
    NOT?: Enumerable<UserSettingsScalarWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    firstName?: StringFilter | string
    sirname?: StringFilter | string
    company?: StringNullableFilter | string | null
    subscription?: StringFilter | string
  }

  export type UserCreateWithoutSettingsInput = {
    id?: string
    email: string
    password: string
  }

  export type UserUncheckedCreateWithoutSettingsInput = {
    id?: string
    email: string
    password: string
  }

  export type UserCreateOrConnectWithoutSettingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
  }

  export type VacancyCreateWithoutAuthorInput = {
    id?: string
    createdAt?: Date | string
    title: string
    company: string
    location: string
    salary: number
    endDate: string
    jobDescription: string
    companyDescription: string
    salaryMin?: number | null
    salaryMax?: number | null
    requirementEssential?: VacancyCreaterequirementEssentialInput | Enumerable<string>
    requirementDesired?: VacancyCreaterequirementDesiredInput | Enumerable<string>
    responsibilities?: VacancyCreateresponsibilitiesInput | Enumerable<string>
    applicants?: ApplicantsCreateNestedManyWithoutVacancyInput
  }

  export type VacancyUncheckedCreateWithoutAuthorInput = {
    id?: string
    createdAt?: Date | string
    title: string
    company: string
    location: string
    salary: number
    endDate: string
    jobDescription: string
    companyDescription: string
    salaryMin?: number | null
    salaryMax?: number | null
    requirementEssential?: VacancyCreaterequirementEssentialInput | Enumerable<string>
    requirementDesired?: VacancyCreaterequirementDesiredInput | Enumerable<string>
    responsibilities?: VacancyCreateresponsibilitiesInput | Enumerable<string>
    applicants?: ApplicantsUncheckedCreateNestedManyWithoutVacancyInput
  }

  export type VacancyCreateOrConnectWithoutAuthorInput = {
    where: VacancyWhereUniqueInput
    create: XOR<VacancyCreateWithoutAuthorInput, VacancyUncheckedCreateWithoutAuthorInput>
  }

  export type VacancyCreateManyAuthorInputEnvelope = {
    data: Enumerable<VacancyCreateManyAuthorInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutSettingsInput = {
    update: XOR<UserUpdateWithoutSettingsInput, UserUncheckedUpdateWithoutSettingsInput>
    create: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
  }

  export type UserUpdateWithoutSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateWithoutSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type VacancyUpsertWithWhereUniqueWithoutAuthorInput = {
    where: VacancyWhereUniqueInput
    update: XOR<VacancyUpdateWithoutAuthorInput, VacancyUncheckedUpdateWithoutAuthorInput>
    create: XOR<VacancyCreateWithoutAuthorInput, VacancyUncheckedCreateWithoutAuthorInput>
  }

  export type VacancyUpdateWithWhereUniqueWithoutAuthorInput = {
    where: VacancyWhereUniqueInput
    data: XOR<VacancyUpdateWithoutAuthorInput, VacancyUncheckedUpdateWithoutAuthorInput>
  }

  export type VacancyUpdateManyWithWhereWithoutAuthorInput = {
    where: VacancyScalarWhereInput
    data: XOR<VacancyUpdateManyMutationInput, VacancyUncheckedUpdateManyWithoutVacanciesInput>
  }

  export type VacancyScalarWhereInput = {
    AND?: Enumerable<VacancyScalarWhereInput>
    OR?: Enumerable<VacancyScalarWhereInput>
    NOT?: Enumerable<VacancyScalarWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    title?: StringFilter | string
    company?: StringFilter | string
    location?: StringFilter | string
    salary?: IntFilter | number
    endDate?: StringFilter | string
    jobDescription?: StringFilter | string
    companyDescription?: StringFilter | string
    salaryMin?: IntNullableFilter | number | null
    salaryMax?: IntNullableFilter | number | null
    requirementEssential?: StringNullableListFilter
    requirementDesired?: StringNullableListFilter
    responsibilities?: StringNullableListFilter
    authorId?: StringFilter | string
  }

  export type ApplicantsCreateWithoutVacancyInput = {
    id?: string
    name: string
    currentJob: string
    location: string
    email: string
    phoneNumber: string
    cvLink: string
  }

  export type ApplicantsUncheckedCreateWithoutVacancyInput = {
    id?: string
    name: string
    currentJob: string
    location: string
    email: string
    phoneNumber: string
    cvLink: string
  }

  export type ApplicantsCreateOrConnectWithoutVacancyInput = {
    where: ApplicantsWhereUniqueInput
    create: XOR<ApplicantsCreateWithoutVacancyInput, ApplicantsUncheckedCreateWithoutVacancyInput>
  }

  export type ApplicantsCreateManyVacancyInputEnvelope = {
    data: Enumerable<ApplicantsCreateManyVacancyInput>
    skipDuplicates?: boolean
  }

  export type UserSettingsCreateWithoutVacanciesInput = {
    id?: string
    firstName: string
    sirname: string
    company?: string | null
    subscription: string
    user: UserCreateNestedOneWithoutSettingsInput
  }

  export type UserSettingsUncheckedCreateWithoutVacanciesInput = {
    id?: string
    userId: string
    firstName: string
    sirname: string
    company?: string | null
    subscription: string
  }

  export type UserSettingsCreateOrConnectWithoutVacanciesInput = {
    where: UserSettingsWhereUniqueInput
    create: XOR<UserSettingsCreateWithoutVacanciesInput, UserSettingsUncheckedCreateWithoutVacanciesInput>
  }

  export type ApplicantsUpsertWithWhereUniqueWithoutVacancyInput = {
    where: ApplicantsWhereUniqueInput
    update: XOR<ApplicantsUpdateWithoutVacancyInput, ApplicantsUncheckedUpdateWithoutVacancyInput>
    create: XOR<ApplicantsCreateWithoutVacancyInput, ApplicantsUncheckedCreateWithoutVacancyInput>
  }

  export type ApplicantsUpdateWithWhereUniqueWithoutVacancyInput = {
    where: ApplicantsWhereUniqueInput
    data: XOR<ApplicantsUpdateWithoutVacancyInput, ApplicantsUncheckedUpdateWithoutVacancyInput>
  }

  export type ApplicantsUpdateManyWithWhereWithoutVacancyInput = {
    where: ApplicantsScalarWhereInput
    data: XOR<ApplicantsUpdateManyMutationInput, ApplicantsUncheckedUpdateManyWithoutApplicantsInput>
  }

  export type ApplicantsScalarWhereInput = {
    AND?: Enumerable<ApplicantsScalarWhereInput>
    OR?: Enumerable<ApplicantsScalarWhereInput>
    NOT?: Enumerable<ApplicantsScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    currentJob?: StringFilter | string
    location?: StringFilter | string
    email?: StringFilter | string
    phoneNumber?: StringFilter | string
    cvLink?: StringFilter | string
    vacancyId?: StringFilter | string
  }

  export type UserSettingsUpsertWithoutVacanciesInput = {
    update: XOR<UserSettingsUpdateWithoutVacanciesInput, UserSettingsUncheckedUpdateWithoutVacanciesInput>
    create: XOR<UserSettingsCreateWithoutVacanciesInput, UserSettingsUncheckedCreateWithoutVacanciesInput>
  }

  export type UserSettingsUpdateWithoutVacanciesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    sirname?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    subscription?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutSettingsInput
  }

  export type UserSettingsUncheckedUpdateWithoutVacanciesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    sirname?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    subscription?: StringFieldUpdateOperationsInput | string
  }

  export type VacancyCreateWithoutApplicantsInput = {
    id?: string
    createdAt?: Date | string
    title: string
    company: string
    location: string
    salary: number
    endDate: string
    jobDescription: string
    companyDescription: string
    salaryMin?: number | null
    salaryMax?: number | null
    requirementEssential?: VacancyCreaterequirementEssentialInput | Enumerable<string>
    requirementDesired?: VacancyCreaterequirementDesiredInput | Enumerable<string>
    responsibilities?: VacancyCreateresponsibilitiesInput | Enumerable<string>
    author: UserSettingsCreateNestedOneWithoutVacanciesInput
  }

  export type VacancyUncheckedCreateWithoutApplicantsInput = {
    id?: string
    createdAt?: Date | string
    title: string
    company: string
    location: string
    salary: number
    endDate: string
    jobDescription: string
    companyDescription: string
    salaryMin?: number | null
    salaryMax?: number | null
    authorId: string
    requirementEssential?: VacancyCreaterequirementEssentialInput | Enumerable<string>
    requirementDesired?: VacancyCreaterequirementDesiredInput | Enumerable<string>
    responsibilities?: VacancyCreateresponsibilitiesInput | Enumerable<string>
  }

  export type VacancyCreateOrConnectWithoutApplicantsInput = {
    where: VacancyWhereUniqueInput
    create: XOR<VacancyCreateWithoutApplicantsInput, VacancyUncheckedCreateWithoutApplicantsInput>
  }

  export type VacancyUpsertWithoutApplicantsInput = {
    update: XOR<VacancyUpdateWithoutApplicantsInput, VacancyUncheckedUpdateWithoutApplicantsInput>
    create: XOR<VacancyCreateWithoutApplicantsInput, VacancyUncheckedCreateWithoutApplicantsInput>
  }

  export type VacancyUpdateWithoutApplicantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    salary?: IntFieldUpdateOperationsInput | number
    endDate?: StringFieldUpdateOperationsInput | string
    jobDescription?: StringFieldUpdateOperationsInput | string
    companyDescription?: StringFieldUpdateOperationsInput | string
    salaryMin?: NullableIntFieldUpdateOperationsInput | number | null
    salaryMax?: NullableIntFieldUpdateOperationsInput | number | null
    requirementEssential?: VacancyUpdaterequirementEssentialInput | Enumerable<string>
    requirementDesired?: VacancyUpdaterequirementDesiredInput | Enumerable<string>
    responsibilities?: VacancyUpdateresponsibilitiesInput | Enumerable<string>
    author?: UserSettingsUpdateOneRequiredWithoutVacanciesInput
  }

  export type VacancyUncheckedUpdateWithoutApplicantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    salary?: IntFieldUpdateOperationsInput | number
    endDate?: StringFieldUpdateOperationsInput | string
    jobDescription?: StringFieldUpdateOperationsInput | string
    companyDescription?: StringFieldUpdateOperationsInput | string
    salaryMin?: NullableIntFieldUpdateOperationsInput | number | null
    salaryMax?: NullableIntFieldUpdateOperationsInput | number | null
    authorId?: StringFieldUpdateOperationsInput | string
    requirementEssential?: VacancyUpdaterequirementEssentialInput | Enumerable<string>
    requirementDesired?: VacancyUpdaterequirementDesiredInput | Enumerable<string>
    responsibilities?: VacancyUpdateresponsibilitiesInput | Enumerable<string>
  }

  export type UserSettingsCreateManyUserInput = {
    id?: string
    firstName: string
    sirname: string
    company?: string | null
    subscription: string
  }

  export type UserSettingsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    sirname?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    subscription?: StringFieldUpdateOperationsInput | string
    vacancies?: VacancyUpdateManyWithoutAuthorInput
  }

  export type UserSettingsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    sirname?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    subscription?: StringFieldUpdateOperationsInput | string
    vacancies?: VacancyUncheckedUpdateManyWithoutAuthorInput
  }

  export type UserSettingsUncheckedUpdateManyWithoutSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    sirname?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    subscription?: StringFieldUpdateOperationsInput | string
  }

  export type VacancyCreateManyAuthorInput = {
    id?: string
    createdAt?: Date | string
    title: string
    company: string
    location: string
    salary: number
    endDate: string
    jobDescription: string
    companyDescription: string
    salaryMin?: number | null
    salaryMax?: number | null
    requirementEssential?: VacancyCreateManyrequirementEssentialInput | Enumerable<string>
    requirementDesired?: VacancyCreateManyrequirementDesiredInput | Enumerable<string>
    responsibilities?: VacancyCreateManyresponsibilitiesInput | Enumerable<string>
  }

  export type VacancyUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    salary?: IntFieldUpdateOperationsInput | number
    endDate?: StringFieldUpdateOperationsInput | string
    jobDescription?: StringFieldUpdateOperationsInput | string
    companyDescription?: StringFieldUpdateOperationsInput | string
    salaryMin?: NullableIntFieldUpdateOperationsInput | number | null
    salaryMax?: NullableIntFieldUpdateOperationsInput | number | null
    requirementEssential?: VacancyUpdaterequirementEssentialInput | Enumerable<string>
    requirementDesired?: VacancyUpdaterequirementDesiredInput | Enumerable<string>
    responsibilities?: VacancyUpdateresponsibilitiesInput | Enumerable<string>
    applicants?: ApplicantsUpdateManyWithoutVacancyInput
  }

  export type VacancyUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    salary?: IntFieldUpdateOperationsInput | number
    endDate?: StringFieldUpdateOperationsInput | string
    jobDescription?: StringFieldUpdateOperationsInput | string
    companyDescription?: StringFieldUpdateOperationsInput | string
    salaryMin?: NullableIntFieldUpdateOperationsInput | number | null
    salaryMax?: NullableIntFieldUpdateOperationsInput | number | null
    requirementEssential?: VacancyUpdaterequirementEssentialInput | Enumerable<string>
    requirementDesired?: VacancyUpdaterequirementDesiredInput | Enumerable<string>
    responsibilities?: VacancyUpdateresponsibilitiesInput | Enumerable<string>
    applicants?: ApplicantsUncheckedUpdateManyWithoutVacancyInput
  }

  export type VacancyUncheckedUpdateManyWithoutVacanciesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    salary?: IntFieldUpdateOperationsInput | number
    endDate?: StringFieldUpdateOperationsInput | string
    jobDescription?: StringFieldUpdateOperationsInput | string
    companyDescription?: StringFieldUpdateOperationsInput | string
    salaryMin?: NullableIntFieldUpdateOperationsInput | number | null
    salaryMax?: NullableIntFieldUpdateOperationsInput | number | null
    requirementEssential?: VacancyUpdaterequirementEssentialInput | Enumerable<string>
    requirementDesired?: VacancyUpdaterequirementDesiredInput | Enumerable<string>
    responsibilities?: VacancyUpdateresponsibilitiesInput | Enumerable<string>
  }

  export type ApplicantsCreateManyVacancyInput = {
    id?: string
    name: string
    currentJob: string
    location: string
    email: string
    phoneNumber: string
    cvLink: string
  }

  export type ApplicantsUpdateWithoutVacancyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    currentJob?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    cvLink?: StringFieldUpdateOperationsInput | string
  }

  export type ApplicantsUncheckedUpdateWithoutVacancyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    currentJob?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    cvLink?: StringFieldUpdateOperationsInput | string
  }

  export type ApplicantsUncheckedUpdateManyWithoutApplicantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    currentJob?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    cvLink?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}